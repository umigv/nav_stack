#include <rclcpp/rclcpp.hpp>
// #include <nav_msgs/msg/occupancy_grid.hpp>
// #include <memory>
// #include <vector>
// #include <queue>
// #include <cmath>

// using std::placeholders::_1;

// class InflationNode : public rclcpp::Node {
// public:
//     InflationNode() : Node("inflation_node") {
//         // Parameters
//         this->declare_parameter<double>("inflation_radius", 15);
//         this->declare_parameter<double>("cost_scaling_factor", 7.0);
//         this->declare_parameter<bool>("inflate_unknown", false);
//         this->declare_parameter<bool>("inflate_around_unknown", false);

//         // Subscriber and Publisher
//         subscriber_ = this->create_subscription<nav_msgs::msg::OccupancyGrid>(
//             "/test_occ", 10, std::bind(&InflationNode::grid_callback, this, _1));
            
//         publisher_ = this->create_publisher<nav_msgs::msg::OccupancyGrid>(
//             "/inflated_occ", 10);
            
//         RCLCPP_INFO(this->get_logger(), "Inflation node initialized");
//     }

// private:
//     void grid_callback(const nav_msgs::msg::OccupancyGrid::SharedPtr msg) {
//         // Make a copy of the original grid
//         auto inflated_grid = *msg;
        
//         // Get parameters
//         double inflation_radius = this->get_parameter("inflation_radius").as_double();
//         double cost_scaling_factor = this->get_parameter("cost_scaling_factor").as_double();
//         bool inflate_unknown = this->get_parameter("inflate_unknown").as_bool();
//         bool inflate_around_unknown = this->get_parameter("inflate_around_unknown").as_bool();

//         RCLCPP_INFO(this->get_logger(), "Got an occ msg");

//         // Perform inflation
//         inflate_occupancy_grid(inflated_grid, inflation_radius, 
//                              cost_scaling_factor, inflate_unknown, inflate_around_unknown);
        
//         // Publish inflated grid
//         publisher_->publish(inflated_grid);
        
//     }

//     void inflate_occupancy_grid(
//         nav_msgs::msg::OccupancyGrid& grid,
//         double inflation_radius,
//         double cost_scaling_factor,
//         bool inflate_unknown,
//         bool inflate_around_unknown)
//     {
//         if (inflation_radius <= 0.0 || cost_scaling_factor <= 0.0) {
//              return;
//          }
//         RCLCPP_INFO(this->get_logger(), "Trying to inflate");

//         const double resolution = grid.info.resolution;
//         const int width = grid.info.width;
//         const int height = grid.info.height;
//         const int cell_inflation_radius = static_cast<int>(std::ceil(inflation_radius / resolution));

//         // Precompute cached costs
//         std::vector<std::vector<uint8_t>> cached_costs(2 * cell_inflation_radius + 1);
//         for (int dx = -cell_inflation_radius; dx <= cell_inflation_radius; ++dx) {
//             cached_costs[dx + cell_inflation_radius].resize(2 * cell_inflation_radius + 1);
//             for (int dy = -cell_inflation_radius; dy <= cell_inflation_radius; ++dy) {
//                 const double distance = std::hypot(dx, dy) * resolution;
//                 if (distance > inflation_radius) {
//                     cached_costs[dx + cell_inflation_radius][dy + cell_inflation_radius] = 0;
//                     continue;
//                 }
//                 const double factor = std::exp(-cost_scaling_factor * distance);
//                 const uint8_t cost = static_cast<uint8_t>(factor * 127);
//                 cached_costs[dx + cell_inflation_radius][dy + cell_inflation_radius] = cost;
//             }
//         }

//         struct CellData {
//             int x, y;
//             int src_x, src_y;
//             double distance;
//         };

//         auto compare = [](const CellData& a, const CellData& b) {
//             return a.distance > b.distance; // Min-heap based on distance
//         };

//         std::priority_queue<CellData, std::vector<CellData>, decltype(compare)> queue(compare);
//         std::vector<bool> seen(width * height, false);
//         RCLCPP_INFO(this->get_logger(), "Finding Obstaclees");

//         // Enqueue obstacle cells and possibly unknowns
//         for (int y = 0; y < height; ++y) {
//             for (int x = 0; x < width; ++x) {
//                 const int index = y * width + x;
//                 const int8_t value = grid.data[index];
//                 if (value == 127 || (inflate_around_unknown && value == -1)) {
                    
//                     CellData data;
//                     data.x = x;
//                     data.y = y;
//                     data.src_x = x;
//                     data.src_y = y;
//                     data.distance = 0.0;
//                     queue.push(data);
//                     seen[index] = true;
//                     grid.data[index] = 127; // Ensure obstacle cells are set to max cost
//                 }
//             }
//         }

//         RCLCPP_INFO(this->get_logger(), "3 Process the queue");

//         // Process the queue
//         while (!queue.empty()) {
//             // RCLCPP_INFO(this->get_logger(), "Popping from queue");

//             CellData current = queue.top();
//             queue.pop();

//             const int dx_curr = current.x - current.src_x;
//             const int dy_curr = current.y - current.src_y;
//             const int cache_x = dx_curr + cell_inflation_radius;
//             const int cache_y = dy_curr + cell_inflation_radius;

//             if (cache_x < 0 || cache_x >= 2 * cell_inflation_radius + 1 ||
//                 cache_y < 0 || cache_y >= 2 * cell_inflation_radius + 1)
//             {
                
//                 continue;
//             }

//             RCLCPP_INFO(this->get_logger(), "Got past the cache"); 


//             const uint8_t cost = cached_costs[cache_x][cache_y];
//             const int index = current.y * width + current.x;
//             int8_t current_value = grid.data[index];

//             // Update the cell's cost
//             if (current_value == -1) {
//                 if (inflate_unknown) {
//                     grid.data[index] = cost;
//                     RCLCPP_INFO(this->get_logger(), "Updated cell (%d, %d) with cost: %d", current.x, current.y, cost);
//                 } else {
//                     continue;
//                 }
//             } else {
//                 if (cost > current_value) {
//                     grid.data[index] = static_cast<int8_t>(cost);
//                     RCLCPP_INFO(this->get_logger(), "Updated cell (%d, %d) with cost: %d", current.x, current.y, cost);
//                 }
//                 RCLCPP_INFO(this->get_logger(), "Cell (%d, %d) already has a higher cost: %d, rather than the cached cost %d", current.x, current.y, current_value, cost);
//             }

//             // Enqueue 4-connected neighbors
//             const int dx[] = {-1, 1, 0, 0};
//             const int dy[] = {0, 0, -1, 1};
//             for (int i = 0; i < 4; ++i) {
//                 const int nx = current.x + dx[i];
//                 const int ny = current.y + dy[i];
//                 if (nx < 0 || nx >= width || ny < 0 || ny >= height) {
//                     continue;
//                 }
//                 const int nindex = ny * width + nx;
//                 if (seen[nindex]) {
//                     continue;
//                 }
//                 const int src_dx = nx - current.src_x;
//                 const int src_dy = ny - current.src_y;
//                 const double distance = std::hypot(src_dx, src_dy) * resolution;
//                 if (distance > inflation_radius) {
//                     continue;
//                 }
//                 seen[nindex] = true;
//                 CellData next;
//                 next.x = nx;
//                 next.y = ny;
//                 next.src_x = current.src_x;
//                 next.src_y = current.src_y;
//                 next.distance = distance;
//                 queue.push(next);
//             }
//         }
//         RCLCPP_INFO(this->get_logger(), "Stop processing  the queue");

//     }

//     rclcpp::Subscription<nav_msgs::msg::OccupancyGrid>::SharedPtr subscriber_;
//     rclcpp::Publisher<nav_msgs::msg::OccupancyGrid>::SharedPtr publisher_;
// };

// int main(int argc, char** argv) {
//     rclcpp::init(argc, argv);
//     auto node = std::make_shared<InflationNode>();
//     rclcpp::spin(node);
//     rclcpp::shutdown();
//     return 0;
// }