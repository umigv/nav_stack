<?xml version='1.0'?>



<robot name="marvin" xmlns:xacro="http://www.ros.org/wiki/xacro"> 
	<!-- Chassis Constants -->
    <xacro:property name="chassis_length" value="${45.5*0.0254}" />
    <xacro:property name="chassis_width" value="${24*0.0254}" />
    <xacro:property name="chassis_height" value="${22*0.0254}" />
    <xacro:property name="chassis_z_offset" value="${4.375*0.0254}" />

    <xacro:property name="chassis_tower_length" value="${8*0.0254}" />
    <xacro:property name="chassis_tower_height" value="${31*0.0254}" />

    <xacro:property name="chassis_payload_length" value="${14.25*0.0254}" />
    <xacro:property name="chassis_payload_height" value="${8*0.0254}" />

    <xacro:property name="chassis_electrical_length" value="${15.25*0.0254}" />
    <xacro:property name="chassis_electrical_height" value="${22*0.0254}" />

    <xacro:property name="chassis_caster_length" value="${8*0.0254}" />
    <xacro:property name="chassis_caster_height" value="${2.25*0.0254}" />
    <xacro:property name="chassis_caster_z_offset" value="${2*0.0254}" />

    <!-- Chassis Inertial Constants -->
    <xacro:property name="chassis_mass" value="29.9371" />
    <xacro:property name="com_x" value="${-4.0*0.0254}" />
    <xacro:property name="com_y" value="0.0" />
    <xacro:property name="com_z" value="${6.1875*0.0254}" />

	<!-- Caster Constants -->
    <xacro:property name="caster_x_offset" value="${-24.625*0.0254}" />
    <xacro:property name="caster_radius" value="${3.5*0.0254}" />
    <xacro:property name="caster_mass" value="0.1" />

	<!-- Wheel Constants -->
    <xacro:property name="wheel_radius" value="${6.1875*0.0254}" />
    <xacro:property name="wheel_width" value="${4*0.0254}" />
    <xacro:property name="wheel_mass" value="5" />
    <xacro:property name="track_width" value="${31*0.0254}" />

    <!-- Lidar Constants -->
    <xacro:property name="lidar_height" value="${32.55*0.0254}"/>

    <!-- Camera Constants -->
    <xacro:property name="camera_mass" value="0.1"/>
    <xacro:property name="camera_angle" value="${10 * 0.01745327777}"/>
    <xacro:property name="camera_x_offset" value="${(4+2.66916)*0.0254}"/> 
    <xacro:property name="camera_z_offset" value="${(31-1.80395)*0.0254}"/> 

    <!-- IMU Constants -->
    <xacro:property name="imu_mass" value="0.025"/>
    <xacro:property name="imu_length" value="0.05"/>
    <xacro:property name="imu_width" value="0.03"/>
    <xacro:property name="imu_height" value="0.01"/>

	<xacro:include filename="$(find marvin_simulation)/urdf/inertia.xacro" />

	<!-- Chassis -->
	<link name="chassis">
		<visual name="chassis_tower_visual">
			<origin xyz="0 0 ${chassis_tower_height / 2 + chassis_z_offset}" rpy="0 0 0" />
			<geometry>
				<box size="${chassis_tower_length} ${chassis_width} ${chassis_tower_height}" />
			</geometry>
		</visual>

        <visual name="chassis_payload_visual">
            <origin xyz="${chassis_tower_length / 2 + chassis_payload_length / 2} 0 ${chassis_payload_height / 2 + chassis_z_offset}" rpy="0 0 0" />
            <geometry>
                <box size="${chassis_payload_length} ${chassis_width} ${chassis_payload_height}" />
            </geometry>
        </visual>

        <visual name="chassis_electrical_visual">
            <origin xyz="${-chassis_tower_length / 2 - chassis_electrical_length / 2} 0 ${chassis_electrical_height / 2 + chassis_z_offset}" rpy="0 0 0" />
            <geometry>
                <box size="${chassis_electrical_length} ${chassis_width} ${chassis_electrical_height}" />
            </geometry>
        </visual>

        <visual name="chassis_caster_visual">
            <origin xyz="${-chassis_tower_length / 2 - chassis_electrical_length - chassis_caster_length / 2} 
                         0 
                         ${chassis_caster_height / 2 + chassis_caster_z_offset + chassis_z_offset}" 
                         rpy="0 0 0" />
            <geometry>
                <box size="${chassis_caster_length} ${chassis_width} ${chassis_caster_height}" />
            </geometry>
        </visual>

		<collision name="chassis_collision">
			<origin xyz="${chassis_tower_length / 2 + chassis_payload_length - chassis_length / 2} 
                         0 
                         ${chassis_z_offset + chassis_tower_height / 2}" 
                    rpy="0 0 0" />
			<geometry>
				<box size="${chassis_length} ${chassis_width} ${chassis_tower_height}" />
			</geometry>
		</collision>

        <xacro:box_inertia mass="${chassis_mass}" length="${chassis_length}" width="${chassis_width}" height="${chassis_height}">
            <origin xyz="${com_x} ${com_y} ${com_z}" rpy="0 0 0" />
		</xacro:box_inertia>
	</link>


    <!-- Caster -->
    <link name="caster">
        <visual name="caster_visual">
            <geometry>
                <sphere radius="${caster_radius}" />
            </geometry>
        </visual>

        <collision name='caster_collision'>
			<origin xyz="0 0 0" rpy=" 0 0 0"/>
			<geometry>
				<sphere radius="${caster_radius}"/>
			</geometry>
			<surface>
				<friction>
				<ode>
					<mu>0.0</mu>
					<mu2>0.0</mu2>
				</ode>
				</friction>
			</surface>
		</collision>

        <xacro:sphere_inertia mass="${caster_mass}" radius="${caster_radius}">
            <origin xyz="0 0 0" rpy="0 0 0" />
        </xacro:sphere_inertia>
    </link>

    <joint name="caster_joint" type="fixed">
        <origin xyz="${caster_x_offset} 0 ${caster_radius}" rpy="0 0 0" />
        <parent link="chassis" />
        <child link="caster" />
    </joint>


    <!-- Wheels -->
    <xacro:include filename="$(find marvin_simulation)/urdf/wheel.xacro"/>
	<xacro:wheel prefix="right" mass="${wheel_mass}" radius="${wheel_radius}" width="${wheel_width}">
		<origin xyz="0 -${track_width / 2} ${wheel_radius}" rpy="0 0 0" />
	</xacro:wheel>
	<xacro:wheel prefix="left" mass="${wheel_mass}" radius="${wheel_radius}" width="${wheel_width}">
		<origin xyz="0 ${track_width/2} ${wheel_radius}" rpy="0 0 0" />
	</xacro:wheel>


    <!-- ZED Camera -->
	<xacro:include filename="$(find zed_wrapper)/urdf/zed_macro.urdf.xacro" />
	<xacro:zed_camera name="zed" model="zed">
	</xacro:zed_camera>

	<joint name="zed_camera_joint" type="fixed">
		<origin xyz="${camera_x_offset} 0 ${camera_z_offset + chassis_z_offset}" rpy="0 ${camera_angle} 0" />
		<parent link="chassis" />
		<child link="zed_camera_link" />
	</joint>


	<!-- Sim Camera -->
	<xacro:include filename="$(find marvin_simulation)/urdf/camera.xacro" />
	<xacro:camera mass="${camera_mass}">
		<origin xyz="${camera_x_offset} 0 ${camera_z_offset + chassis_z_offset}" rpy="0 ${camera_angle} 0" />
	</xacro:camera>


    <!-- Lidar -->
    <xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro" />
	<xacro:VLP-16 parent="chassis" name="velodyne" topic="/velodyne_points" hz="20" samples="440" gpu="true">
		<origin xyz="0 0 ${chassis_z_offset + lidar_height}" rpy="0 0 0" />
	</xacro:VLP-16>


	<!-- IMU -->
	<link name="imu_link">
		<visual name="imu_visual">
			<origin xyz="0 0 0" rpy="0 0 0" />
			<geometry>
				<box size="0.05 0.03 0.01" />
			</geometry>
		</visual>

        <collision name="imu_collision">
            <origin xyz="0 0 0" rpy="0 0 0" />
            <geometry>
                <box size="${imu_length} ${imu_width} ${imu_height}" />
            </geometry>
        </collision>

        <xacro:box_inertia mass="${imu_mass}" length="${imu_length}" width="${imu_width}" height="${imu_height}">
            <origin xyz="0 0 0" rpy="0 0 0" />
        </xacro:box_inertia>
	</link>

	<joint name="imu_joint" type="fixed">
		<origin xyz="${-chassis_tower_length / 2 - chassis_electrical_length/2+0.005} 0 ${chassis_electrical_height + chassis_z_offset}" rpy="0 0 0" />
		<parent link="chassis" />
		<child link="imu_link" />
		<axis xyz="0 1 0" />
	</joint>


    <!-- Encoders -->
    <link name="encoders" />

	<joint name="encoders_joint" type="fixed">
		<origin xyz="0 0 ${wheel_radius}" rpy="0 0 0" />
		<parent link="chassis" />
		<child link="encoders" />
		<axis xyz="0 1 0" />
	</joint>

    
    <!-- Color of bot -->
	<gazebo reference="chassis_tower_visual">
		<material>Gazebo/Blue</material>
	</gazebo>

	<gazebo reference="chassis_payload_visual">
		<material>Gazebo/Blue</material>
	</gazebo>

	<gazebo reference="chassis_electrical_visual">
		<material>Gazebo/Blue</material>
	</gazebo>

	<gazebo reference="chassis_caster_visual">
		<material>Gazebo/Blue</material>
	</gazebo>

	<gazebo reference="caster_visual">
		<material>Gazebo/Green</material>
	</gazebo>

	<gazebo reference="imu_visual">
		<material>Gazebo/Purple</material>
	</gazebo>


    <!-- Motor, Camera and IMU Simulation -->
	<xacro:include filename="$(find marvin_simulation)/urdf/marvin.gazebo" />
</robot>

