<?xml version='1.0'?>

<robot name="marvin" xmlns:xacro="http://www.ros.org/wiki/xacro">
	<xacro:property name="front_offset" value="0.3" /> <!-- How far forward the wheels and lidar are compared to the center of the chassis -->
	<xacro:property name="back_offset" value="-0.6715" /> <!-- How far back the caster wheel is compared to the center of the chassis -->
	
	<xacro:property name="chassis_mass" value="29.9371" />
	<xacro:property name="chassis_length" value="1.143" />
	<xacro:property name="chassis_width" value="0.6096" />
	<xacro:property name="chassis_height" value="0.5588" />

	<!-- Center of mass (relative to center of chassis) -->
	<xacro:property name="com_x" value="0.0" />
	<xacro:property name="com_y" value="0.0" />
	<xacro:property name="com_z" value="0.0" />

	<xacro:property name="caster_radius" value="0.05" />

	<xacro:property name="wheel_mass" value="5" />
	<xacro:property name="wheel_radius" value="0.157226" />
	<xacro:property name="wheel_width" value="0.15" />
	<xacro:property name="wheel_separation" value="0.78" /> <!-- Distance from center to center -->
	<xacro:property name="wheel_offset" value="0.01" /> <!-- How far above the bottom plate of the robot the wheels are -->

	<xacro:property name="lidar_height" value="0.89535"/> <!-- The distance from the base of the chassis to the base of the LiDAR -->

	<xacro:property name="camera_mass" value="0.1"/>
	<xacro:property name="camera_front_offset" value="0.5715"/> <!-- How far forward the camera is compared to the center of the chassis -->
	<xacro:property name="camera_z_offset" value="0.1"/> <!-- How far down the camera is compared to the LiDAR -->

	<!-- Chassis -->
	<link name="chassis">
		<origin xyz="0 0 0" rpy="0 0 0" />

		<visual name="chassis_base_visual">
			<origin xyz="0 0 0" rpy="0 0 0" />
			<geometry>
				<box size="${chassis_length} ${chassis_width} ${chassis_height}" />
			</geometry>
		</visual>

		<visual name="chassis_top_visual">
			<origin xyz="${chassis_length/2-chassis_length/6} 0 ${chassis_height-(lidar_height-chassis_height)/3}" rpy="0 0 0" />
			<geometry>
				<box size="${chassis_length/3} ${chassis_width} ${lidar_height-chassis_height}" />
			</geometry>
		</visual>

		<visual name="chassis_front_visual">
			<origin xyz="${chassis_length/2+0.15} 0 ${0.05-chassis_height/2}" rpy="0 0 0" />
			<geometry>
				<box size="0.3 ${chassis_width} 0.1" />
			</geometry>
		</visual>

		<visual name="chassis_back_visual">
			<origin xyz="${-chassis_length/2-0.1} 0 ${0.05-chassis_height/2}" rpy="0 0 0" />
			<geometry>
				<box size="0.2 ${chassis_width} 0.1" />
			</geometry>
		</visual>
	  
		<visual name='caster_visual'>
			<origin xyz="${back_offset} 0 ${caster_radius+wheel_offset-wheel_radius-chassis_height/2}" rpy=" 0 0 0"/>
			<geometry>
				<sphere radius="${caster_radius}"/>
			</geometry>
		</visual>
	</link>
	

	<!-- Chassis Inertia -->
	<link name="chassis_inertial_link">
		<inertial>
			<mass value="${chassis_mass}" />
			<origin xyz="${com_x} ${com_y} ${com_z}" rpy="0 0 0" />
			<inertia
				ixx="${chassis_mass/12*(chassis_height**2+chassis_length**2)}" ixy="0" ixz="0"
				iyy="${chassis_mass/12*(chassis_width**2+chassis_height**2)}" iyz="0"
				izz="${chassis_mass/12*(chassis_width**2+chassis_length**2)}"
			/>
		</inertial>
	</link>

	<joint name="chassis_inertial_joint" type="fixed">
		<origin xyz="0 0 0" rpy="0 0 0" />
		<parent link="chassis" />
		<child link="chassis_inertial_link" />
	</joint>


	<!-- Wheels -->
	<xacro:include filename="$(find marvin_simulation)/urdf/wheel.xacro"/>
	<xacro:wheel prefix="right" mass="${wheel_mass}" radius="${wheel_radius}" width="${wheel_width}">
		<origin xyz="${front_offset} -${wheel_separation/2} ${wheel_offset-chassis_height/2}" rpy="0 0 0" />
	</xacro:wheel>
	<xacro:wheel prefix="left" mass="${wheel_mass}" radius="${wheel_radius}" width="${wheel_width}">
		<origin xyz="${front_offset} ${wheel_separation/2} ${wheel_offset-chassis_height/2}" rpy="0 0 0" />
	</xacro:wheel>
	

	<!-- ZED Camera -->
	<xacro:include filename="$(find zed_wrapper)/urdf/zed_macro.urdf.xacro" />
	<xacro:zed_camera name="zed" model="zed">
	</xacro:zed_camera>

	<joint name="zed_camera_joint" type="fixed">
		<origin xyz="${camera_front_offset} 0 ${lidar_height-chassis_height/2-camera_z_offset}" rpy="0 0 0" /> <!-- Rotation may be wrong -->
		<parent link="chassis" />
		<child link="zed_camera_link" />
	</joint>


	<!-- Sim Camera -->
	<xacro:include filename="$(find marvin_simulation)/urdf/camera.xacro" />
	<xacro:camera mass="${camera_mass}">
		<origin xyz="${camera_front_offset} 0 ${lidar_height-chassis_height/2-camera_z_offset+0.03/2}" rpy="0 0 0" /> <!-- Rotation may be wrong -->
	</xacro:camera>


	<!-- LiDAR -->
	<xacro:include filename="$(find velodyne_description)/urdf/VLP-16.urdf.xacro" />
	<xacro:VLP-16 parent="chassis" name="velodyne" topic="/velodyne_points" hz="20" samples="440" gpu="true">
		<origin xyz="${chassis_length/2-chassis_length/6} 0 ${lidar_height-chassis_height/2}" rpy="0 0 0" />
	</xacro:VLP-16>


	<!-- IMU -->
	<link name="imu_link">
		<visual name="imu_visual">
			<origin xyz="0 0 0" rpy="0 0 0" />
			<geometry>
				<box size="0.05 0.03 0.01" />
			</geometry>
		</visual>
	</link>

	<joint name="imu_joint" type="fixed">
		<origin xyz="0 0 ${chassis_height/2}" rpy="0 0 0" />
		<parent link="chassis" />
		<child link="imu_link" />
		<axis xyz="0 1 0" />
	</joint>


	<!-- Encoders -->
	<link name="encoders" />

	<joint name="encoders_joint" type="fixed">
		<origin xyz="${front_offset} 0 ${wheel_offset-chassis_height/2}" rpy="0 0 0" />
		<parent link="chassis" />
		<child link="encoders" />
		<axis xyz="0 1 0" />
	</joint>


	<!-- Odom -->
	<link name="odom" />

	<joint name="odom_joint" type="fixed">
		<origin xyz="0 0 0" rpy="0 0 0" />
		<parent link="odom" />
		<child link="chassis" />
		<axis xyz="0 1 0" />
	</joint>

	<!-- Color of bot -->
	<gazebo reference="chassis_base_visual">
		<material>Gazebo/Blue</material>
	</gazebo>

	<gazebo reference="chassis_top_visual">
		<material>Gazebo/Blue</material>
	</gazebo>

	<gazebo reference="chassis_front_visual">
		<material>Gazebo/Blue</material>
	</gazebo>

	<gazebo reference="chassis_back_visual">
		<material>Gazebo/Blue</material>
	</gazebo>

	<gazebo reference="caster_visual">
		<material>Gazebo/Green</material>
	</gazebo>

	<gazebo reference="imu">
		<material>Gazebo/Purple</material>
	</gazebo>

	<!-- Motor, Camera and IMU Simulation -->
	<xacro:include filename="$(find marvin_simulation)/urdf/marvin.gazebo" />

</robot>